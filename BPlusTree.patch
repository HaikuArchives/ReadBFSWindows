Index: BPlusTree.cpp
===================================================================
--- BPlusTree.cpp	(revision 21202)
+++ BPlusTree.cpp	(working copy)
@@ -1189,8 +1189,12 @@
 	// move the keys in the old node: the order is important here,
 	// because we don't want to overwrite any contents
 
-	keys = keyIndex <= skip ? out : keyIndex - skip;
+	keys = keyIndex <= skip ? out - 1 : keyIndex - skip;
 	keyIndex -= skip;
+	in = out - keyIndex - 1;
+		// Note: keyIndex and in will contain invalid values when the new key
+		// went to the other node. But in this case bytes and bytesAfter are
+		// 0 and subsequently we never use keyIndex and in.
 
 	if (bytesBefore)
 		memmove(inKeys, inKeys + total, bytesBefore);
@@ -1201,8 +1205,8 @@
 
 	if (bytesBefore)
 		memmove(outKeyLengths, inKeyLengths + skip, keys * sizeof(uint16));
-	in = out - keyIndex - 1;
 	if (bytesAfter) {
+		// if byteAfter is > 0, keyIndex is larger than skip
 		memmove(outKeyLengths + keyIndex + 1, inKeyLengths + skip + keyIndex,
 			in * sizeof(uint16));
 	}
@@ -1908,7 +1912,7 @@
 			nextOffset = node->OverflowLink();
 		else {
 			if (node->AllKeyLength() > fTree->fNodeSize
-				|| (uint32)node->Values() > (uint32)node + fTree->fNodeSize
+				|| (addr_t)node->Values() > (addr_t)node + fTree->fNodeSize
 					- 8 * node->NumKeys())
 				RETURN_ERROR(B_ERROR);
 
