Index: Inode.cpp
===================================================================
--- Inode.cpp	(revision 20813)
+++ Inode.cpp	(working copy)
@@ -11,13 +11,7 @@
 #include "BPlusTree.h"
 #include "Index.h"
 
-#include <fs_cache.h>
-#include <util/kernel_cpp.h>
 
-#include <string.h>
-#include <stdio.h>
-
-
 class InodeAllocator {
 	public:
 		InodeAllocator(Transaction &transaction);
@@ -78,11 +72,13 @@
 	if (fInode == NULL)
 		RETURN_ERROR(B_NO_MEMORY);
 
-	status = new_vnode(volume->ID(), fInode->ID(), fInode);
-	if (status < B_OK) {
-		delete fInode;
-		fInode = NULL;
-		RETURN_ERROR(status);
+	if (volume->ID() >= 0) {
+		status = new_vnode(volume->ID(), fInode->ID(), fInode);
+		if (status < B_OK) {
+			delete fInode;
+			fInode = NULL;
+			RETURN_ERROR(status);
+		}
 	}
 
 	*_inode = fInode;
@@ -124,7 +120,7 @@
 		return status;
 	}
 
-	if (!fInode->IsSymLink())
+	if (!fInode->IsSymLink() && volume->ID() >= 0)
 		status = publish_vnode(volume->ID(), fInode->ID(), fInode);
 
 	fTransaction = NULL;
@@ -169,7 +165,7 @@
 //	#pragma mark - Inode
 
 
-Inode::Inode(Volume *volume, vnode_id id)
+Inode::Inode(Volume *volume, ino_t id)
 	:
 	fVolume(volume),
 	fID(id),
@@ -183,8 +179,8 @@
 	memcpy(&fNode, node.Node(), sizeof(bfs_inode));
 
 	char lockName[B_OS_NAME_LENGTH];
-	snprintf(lockName, sizeof(lockName), "bfs inode %ld.%d",
-		BlockRun().AllocationGroup(), BlockRun().Start());
+	snprintf(lockName, sizeof(lockName), "bfs inode %d.%d",
+		(int)BlockRun().AllocationGroup(), BlockRun().Start());
 	fLock.Initialize(lockName);
 
 	// these two will help to maintain the indices
@@ -198,7 +194,8 @@
 }
 
 
-Inode::Inode(Volume *volume, Transaction &transaction, vnode_id id, mode_t mode, block_run &run)
+Inode::Inode(Volume *volume, Transaction &transaction, ino_t id, mode_t mode,
+		block_run &run)
 	:
 	fVolume(volume),
 	fID(id),
@@ -210,8 +207,8 @@
 		volume, &transaction, id, this));
 
 	char lockName[B_OS_NAME_LENGTH];
-	snprintf(lockName, sizeof(lockName), "bfs inode+%ld.%d",
-		run.AllocationGroup(), run.Start());
+	snprintf(lockName, sizeof(lockName), "bfs inode+%d.%d",
+		(int)run.AllocationGroup(), run.Start());
 	fLock.Initialize(lockName);
 
 	NodeGetter node(volume, transaction, this, true);
@@ -502,6 +499,7 @@
 Inode::_AddSmallData(Transaction &transaction, NodeGetter &nodeGetter,
 	const char *name, uint32 type, const uint8 *data, size_t length, bool force)
 {
+	// TODO: support new write attr semantics and write offset!
 	bfs_inode *node = nodeGetter.WritableNode();
 
 	if (node == NULL || name == NULL || data == NULL)
@@ -1005,7 +1003,7 @@
 	BPlusTree *tree;
 	status_t status = attributes->GetTree(&tree);
 	if (status == B_OK) {
-		vnode_id id;
+		ino_t id;
 		status = tree->Find((uint8 *)name, (uint16)strlen(name), &id);
 		if (status == B_OK) {
 			Vnode vnode(fVolume, id);
@@ -1051,7 +1049,7 @@
 
 	// Inode::Create() locks the inode for us
 	return Inode::Create(transaction, attributes, name, 
-		S_ATTR | S_FILE | 0666, 0, type, NULL, attribute);
+		S_ATTR | S_FILE | 0666, 0, type, NULL, NULL, attribute);
 }
 
 
@@ -1093,7 +1091,7 @@
 	uint32 count = 0;
 	char name[BPLUSTREE_MAX_KEY_LENGTH];
 	uint16 length;
-	vnode_id id;
+	ino_t id;
 	while (iterator.GetNextEntry(name, &length, B_FILE_NAME_LENGTH,
 			&id) == B_OK) {
 		if (Mode() & (S_ATTR_DIR | S_INDEX_DIR))
@@ -2014,7 +2012,7 @@
 		char name[B_FILE_NAME_LENGTH];
 		uint32 type;
 		size_t length;
-		vnode_id id;
+		ino_t id;
 		while ((status = iterator.GetNext(name, &length, &type, &id)) == B_OK) {
 			RemoveAttribute(transaction, name);
 		}
@@ -2126,7 +2124,7 @@
 
 
 status_t
-Inode::Remove(Transaction &transaction, const char *name, off_t *_id,
+Inode::Remove(Transaction &transaction, const char *name, ino_t *_id,
 	bool isDirectory)
 {
 	BPlusTree *tree;
@@ -2209,18 +2207,22 @@
 /*!
 	Creates the inode with the specified parent directory, and automatically
 	adds the created inode to that parent directory. If an attribute directory
-	is created, it will also automatically added to the parent inode as such.
-	However, the indices root node, and the regular root node won't be added
-	to the super block.
+	is created, it will also automatically  be added to the parent inode as
+	such. However, the indices root node, and the regular root node won't be
+	added to the super block.
 	It will also create the initial B+tree for the inode if it's a directory
 	of any kind.
-	If the "_id" or "_inode" variable is given and non-NULL to store the inode's
-	ID, the inode stays locked - you have to call put_vnode() if you don't use it
-	anymore.
+	If the "_id" or "_inode" variable is given and non-NULL to store the
+	inode's ID, the inode stays locked - you have to call put_vnode() if you
+	don't use it anymore.
+	If the node already exists, this method will fail if O_EXCL is set, or it's
+	a directory or a symlink. Otherwise, it will just be returned. If O_TRUNC
+	has been specified, the file will also be truncated.
 */
 status_t
 Inode::Create(Transaction &transaction, Inode *parent, const char *name,
-	int32 mode, int openMode, uint32 type, off_t *_id, Inode **_inode)
+	int32 mode, int openMode, uint32 type, bool *_created, ino_t *_id,
+	Inode **_inode)
 {
 	FUNCTION_START(("name = %s, mode = %ld\n", name, mode));
 
@@ -2278,8 +2280,10 @@
 					return status;
 			}
 
+			if (_created)
+				*_created = false;
 			if (_id)
-				*_id = offset;
+				*_id = inode->ID();
 			if (_inode)
 				*_inode = inode;
 
@@ -2399,6 +2403,8 @@
 			inode->Size(), volume->Device()));
 	}
 
+	if (_created)
+		*_created = true;
 	if (_id != NULL)
 		*_id = inode->ID();
 	if (_inode != NULL)
@@ -2451,7 +2457,7 @@
 
 status_t
 AttributeIterator::GetNext(char *name, size_t *_length, uint32 *_type,
-	vnode_id *_id)
+	ino_t *_id)
 {
 	// read attributes out of the small data section
 
@@ -2479,7 +2485,7 @@
 			strncpy(name, item->Name(), B_FILE_NAME_LENGTH);
 			*_type = item->Type();
 			*_length = item->NameSize();
-			*_id = (vnode_id)fCurrentSmallData;
+			*_id = (ino_t)fCurrentSmallData;
 
 			fCurrentSmallData = i;
 		}
@@ -2505,7 +2511,7 @@
 	if (fAttributes == NULL) {
 		if (get_vnode(volume->ID(), volume->ToVnode(fInode->Attributes()),
 				(void **)&fAttributes) != B_OK) {
-			FATAL(("get_vnode() failed in AttributeIterator::GetNext(vnode_id"
+			FATAL(("get_vnode() failed in AttributeIterator::GetNext(ino_t"
 				" = %Ld,name = \"%s\")\n",fInode->ID(),name));
 			return B_ENTRY_NOT_FOUND;
 		}
@@ -2513,14 +2519,14 @@
 		BPlusTree *tree;
 		if (fAttributes->GetTree(&tree) < B_OK
 			|| (fIterator = new TreeIterator(tree)) == NULL) {
-			FATAL(("could not get tree in AttributeIterator::GetNext(vnode_id"
+			FATAL(("could not get tree in AttributeIterator::GetNext(ino_t"
 				" = %Ld,name = \"%s\")\n",fInode->ID(),name));
 			return B_ENTRY_NOT_FOUND;
 		}
 	}
 
 	uint16 length;
-	vnode_id id;
+	ino_t id;
 	status_t status = fIterator->GetNextEntry(name, &length,
 		B_FILE_NAME_LENGTH, &id);
 	if (status < B_OK)
@@ -2530,7 +2536,7 @@
 	Inode *attribute;
 	if ((status = vnode.Get(&attribute)) == B_OK) {
 		*_type = attribute->Type();
-		*_length = attribute->Size();
+		*_length = length;
 		*_id = id;
 	}
 
